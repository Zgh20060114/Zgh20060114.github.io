{"title":"Pytorch","uid":"61251d8b73997ae6479adce2ddc93d34","slug":"Pytorch","date":"2023-12-15T14:50:19.000Z","updated":"2023-12-22T06:10:31.989Z","comments":true,"path":"api/articles/Pytorch.json","keywords":null,"cover":null,"content":"<p>在 Python 中，lambda 是用来创建匿名函数的关键字。所谓匿名函数，即没有显式定义函数名的函数，通常用于需要临时定义简单函数的场景。</p>\n<p>lambda 函数的语法如下：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">lambda arguments: expression</span></span></code></pre></div><p>其中：</p>\n<ul>\n<li><code>arguments</code> 是函数的参数，可以有多个参数，用逗号隔开。</li>\n<li><code>expression</code> 是函数的返回值计算表达式。</li>\n</ul>\n<p>lambda 函数通常用于需要一个函数，但是又不想正式定义一个函数的场景，比如作为其他函数的参数传递进去，或者在一些函数式编程的场景中使用。</p>\n<p>params &#x3D; [W_xh, W_hh, b_h, W_hq, b_q]<br>for param in params:<br>        param.requires_grad_(True)</p>\n<p>目的是告诉 PyTorch 在模型训练过程中需要计算这些参数的梯度，并且在反向传播时对其进行更新。</p>\n<p><code>Xt*Wxh + Ht−1*Whh=cat(Xt,Ht−1)*cat(Wxh,Whh)</code></p>\n<p><code>torch.matmul(X, W_xh) + torch.matmul(H, W_hh)</code></p>\n<p><code>torch.matmul(torch.cat((X, H), 1), torch.cat((W_xh, W_hh), 0))</code></p>\n<p>当一个类实现了 <code>__call__</code> 方法时，它的实例对象可以像函数一样进行调用。这意味着你可以使用实例对象作为函数来调用，就好像调用一个函数一样。</p>\n<p>例如，假设有一个类 <code>MyClass</code>，并且实现了 <code>__call__</code> 方法：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">python</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">class MyClass:</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">    def __call__(self, x):</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">        print(&quot;Calling MyClass with argument:&quot;, x)</span></span></code></pre></div><p>现在，你可以创建一个 <code>MyClass</code> 的实例，并将其作为函数进行调用：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">python</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">obj = MyClass()</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">obj(10)</span></span></code></pre></div><p>输出结果将是：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\"></span></span>\n<span class=\"line\"><span style=\"color: #babed8\">Calling MyClass with argument: 10</span></span></code></pre></div><p>所以<br><code>class RNNModelScratch: #@save</code><br><code>&quot;&quot;&quot;从零开始实现的循环神经网络模型&quot;&quot;&quot;</code><br><code>def __init__(self, vocab_size, num_hiddens, device,</code><br><code>get_params, init_state, forward_fn):</code><br><code>self.vocab_size, self.num_hiddens = vocab_size, num_hiddens</code><br><code>self.params = get_params(vocab_size, num_hiddens, device)</code><br><code>self.init_state, self.forward_fn = init_state, forward_fn</code><br><code>def __call__(self, X, state):</code><br><code>X = F.one_hot(X.T, self.vocab_size).type(torch.float32)</code><br><code>return self.forward_fn(X, state, self.params)</code></p>\n<p>可以这样调用：</p>\n<p><code>net = RNNModelScratch(len(vocab), num_hiddens, d2l.try_gpu(), get_params,</code><br><code>init_rnn_state, rnn)</code></p>\n<p><code>Y, new_state = net(X.to(d2l.try_gpu()), state)</code></p>\n<p><code>**kwargs</code> 是 Python 中的一种特殊语法，用于接收任意数量的关键字参数（keyword arguments）。在函数或方法的定义中，<code>**kwargs</code> 会将传递给函数的未命名关键字参数收集到一个字典中，其中字典的键是参数名，值是参数值。</p>\n<p>在这段代码中，<code>**kwargs</code> 被用作 <code>NWKernelRegression</code> 类的初始化方法 <code>__init__</code> 的参数。通过使用 <code>**kwargs</code>，可以接收任意数量的关键字参数，并将它们存储为类的属性。这样做可以使代码更加灵活，允许用户在创建 <code>NWKernelRegression</code> 实例时传递额外的参数。</p>\n<p>例如，如果你创建了一个 <code>NWKernelRegression</code> 实例时传递了额外的参数，比如 <code>model = NWKernelRegression(param1=10, param2=&#39;abc&#39;)</code>，那么这些额外的参数会被收集到 <code>kwargs</code> 字典中，字典的键是参数名，值是参数值。你可以根据需要在 <code>__init__</code> 方法中使用这些参数。</p>\n<p>总而言之，<code>**kwargs</code> 允许在函数或方法定义中接收任意数量的关键字参数，并将它们保存为字典以供后续使用。</p>\n","text":"在 Python 中，lambda 是用来创建匿名函数的关键字。所谓匿名函数，即没有显式定义函数名的函数，通常用于需要临时定义简单函数的场景。 lambda 函...","permalink":"/post/Pytorch","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"Zgh","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"deeplearning","uid":"2dd54cd4b432aa48fbfa03c6312b571a","slug":"deeplearning","date":"2023-12-16T02:57:26.000Z","updated":"2023-12-20T04:05:43.259Z","comments":true,"path":"api/articles/deeplearning.json","keywords":null,"cover":[],"text":"在 Pandas 中，.apply() 是用于对 DataFrame 或 Series 中的元素应用指定函数的方法。 对于 DataFrame，.apply()...","permalink":"/post/deeplearning","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Zgh","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Hello World","uid":"b9663f58f18133b35bfe243f3e916a80","slug":"hello-world","date":"2023-12-15T14:27:11.801Z","updated":"2023-12-15T14:27:11.801Z","comments":true,"path":"api/articles/hello-world.json","keywords":null,"cover":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info...","permalink":"/post/hello-world","photos":[],"count_time":{"symbolsCount":448,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Zgh","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}